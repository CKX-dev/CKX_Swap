type Value = 
 variant {
   Blob: blob;
   Int: int;
   Nat: nat;
   Text: text;
 };
type TxReceipt = 
 variant {
   err: text;
   ok: nat;
 };
type TxIndex__1 = nat;
type TxIndex = nat;
type TransferResult = 
 variant {
   Err: TransferError;
   Ok: TxIndex;
 };
type TransferFromResult = 
 variant {
   Err: TransferFromError;
   Ok: TxIndex;
 };
type TransferFromError = 
 variant {
   BadBurn: record {min_burn_amount: Balance;};
   BadFee: record {expected_fee: Balance;};
   CreatedInFuture: record {ledger_time: Timestamp;};
   Duplicate: record {duplicate_of: TxIndex;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientAllowance: record {allowance: Balance;};
   InsufficientFunds: record {balance: Balance;};
   TemporarilyUnavailable;
   TooOld;
 };
type TransferFromArgs = 
 record {
   amount: Balance;
   created_at_time: opt nat64;
   fee: opt Balance;
   from_subaccount: Account;
   memo: opt blob;
   to: Account;
 };
type TransferError = 
 variant {
   BadBurn: record {min_burn_amount: Balance;};
   BadFee: record {expected_fee: Balance;};
   CreatedInFuture: record {ledger_time: Timestamp;};
   Duplicate: record {duplicate_of: TxIndex;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientFunds: record {balance: Balance;};
   TemporarilyUnavailable;
   TooOld;
 };
type TransferArgs = 
 record {
   amount: Balance;
   created_at_time: opt nat64;
   fee: opt Balance;
   from_subaccount: opt Subaccount;
   memo: opt blob;
   to: Account;
 };
type Transfer = 
 record {
   amount: Balance;
   created_at_time: opt nat64;
   fee: opt Balance;
   from: Account;
   memo: opt blob;
   to: Account;
 };
type Transaction__1 = 
 record {
   burn: opt Burn;
   index: TxIndex;
   kind: text;
   mint: opt Mint__1;
   timestamp: Timestamp;
   transfer: opt Transfer;
 };
type TransactionRange = record {transactions: vec Transaction;};
type Transaction = 
 record {
   burn: opt Burn;
   index: TxIndex;
   kind: text;
   mint: opt Mint__1;
   timestamp: Timestamp;
   transfer: opt Transfer;
 };
type Timestamp = nat64;
type Time = int;
type SupportedStandard = 
 record {
   name: text;
   url: text;
 };
type Subaccount = blob;
type QueryArchiveFn = func (GetTransactionsRequest__1) ->
                       (TransactionRange) query;
type Mint__1 = 
 record {
   amount: Balance;
   created_at_time: opt nat64;
   memo: opt blob;
   to: Account;
 };
type Mint = 
 record {
   amount: Balance;
   created_at_time: opt nat64;
   memo: opt blob;
   to: Account;
 };
type MetaDatum = 
 record {
   text;
   Value;
 };
type ICRC1SubAccountBalance = 
 variant {
   err: text;
   ok: nat;
 };
type GetTransactionsResponse = 
 record {
   archived_transactions: vec ArchivedTransaction;
   first_index: TxIndex;
   log_length: nat;
   transactions: vec Transaction;
 };
type GetTransactionsRequest__1 = 
 record {
   length: nat;
   start: TxIndex;
 };
type GetTransactionsRequest = 
 record {
   length: nat;
   start: TxIndex;
 };
type DepositType = 
 record {
   amount: nat;
   duration: nat;
   firstMultiplier: float64;
   id: nat;
   isActive: bool;
   lastClaimedTime: int;
   lastUpdateTime: int;
   startTime: Time;
 };
type Deposit = 
 service {
   addBorrowId: (principal) -> (text);
   addToken: (principal, text) -> (TxReceipt);
   approveToken: (nat) -> (ApproveResult);
   balanceOf: (text, principal) -> (nat) query;
   burn: (BurnArgs) -> (TransferResult);
   calculateAPY: () -> (float64);
   deposit: (principal, nat, nat) -> (TxReceipt);
   depositReward: (principal, nat) -> (TxReceipt);
   deposit_cycles: () -> ();
   getAverageLock: (principal) -> (opt nat);
   getCirculatingSupply: () -> (nat);
   getCurrentMultiplier: (DepositType) -> (float64);
   getDepositId: (principal) -> (opt vec DepositType);
   getGlobalAverageLockTime: () -> (opt nat);
   getICRC1SubAccountBalance: (principal, text) -> (ICRC1SubAccountBalance);
   getInterestInfo: (principal) -> (nat);
   getInterestUI: (principal) -> (float64);
   getMultiplier: (Time, Time, float64, float64, nat) -> (float64);
   getPrincipal: () -> (principal);
   getShareOfInterest: () -> (opt float64);
   getTokenBalance: (principal) -> (Balance__1);
   getTokenDecimals: () -> (nat8);
   getTokenId: () -> (text);
   getTotalInterest: () -> (nat);
   getTotalInterestPaidOut: (nat) -> (nat);
   getWrapBalance: (principal) -> (Balance__1);
   get_transaction: (TxIndex__1) -> (opt Transaction__1);
   get_transactions: (GetTransactionsRequest) ->
    (GetTransactionsResponse) query;
   icrc1_balance_of: (Account__1) -> (Balance__1) query;
   icrc1_decimals: () -> (nat8) query;
   icrc1_fee: () -> (Balance__1) query;
   icrc1_metadata: () -> (vec MetaDatum) query;
   icrc1_minting_account: () -> (opt Account__1) query;
   /// Functions for the ICRC1 token standard
   icrc1_name: () -> (text) query;
   icrc1_supported_standards: () -> (vec SupportedStandard) query;
   icrc1_symbol: () -> (text) query;
   icrc1_total_supply: () -> (Balance__1) query;
   icrc1_transfer: (TransferArgs) -> (TransferResult);
   icrc2_allowance: (AllowanceArgs) -> (Allowance) query;
   icrc2_approve: (ApproveArgs) -> (ApproveResult);
   icrc2_transfer_from: (TransferFromArgs) -> (TransferFromResult);
   inc: () -> (text);
   mint: (Mint) -> (TransferResult);
   privateBurn: (nat) -> (TransferResult);
   privateWithdraw: (nat, principal) -> (TransferResult);
   setTokenId: (text) -> (text);
   timeNow: () -> (int);
   unWrapToken: (nat) -> (TransferResult);
   withdrawDepositAndInterestArray: (vec nat) -> (vec nat);
   withdrawInterestAll: () -> (TransferResult);
 };
type BurnArgs = 
 record {
   amount: Balance;
   created_at_time: opt nat64;
   from_subaccount: opt Subaccount;
   memo: opt blob;
 };
type Burn = 
 record {
   amount: Balance;
   created_at_time: opt nat64;
   from: Account;
   memo: opt blob;
 };
type Balance__1 = nat;
type Balance = nat;
type ArchivedTransaction = 
 record {
   callback: QueryArchiveFn;
   length: nat;
   start: TxIndex;
 };
type ApproveResult = 
 variant {
   Err: ApproveError;
   Ok: TxIndex;
 };
type ApproveError = 
 variant {
   AllowanceChanged: record {current_allowance: nat;};
   BadFee: record {expected_fee: nat;};
   CreatedInFuture: record {ledger_time: nat64;};
   Duplicate: record {duplicate_of: nat;};
   Expired: record {ledger_time: nat64;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientFunds: record {balance: nat;};
   TemporarilyUnavailable;
   TooOld;
 };
type ApproveArgs = 
 record {
   amount: nat;
   created_at_time: opt nat64;
   expected_allowance: opt nat;
   expires_at: opt nat64;
   fee: opt nat;
   from_subaccount: opt blob;
   memo: opt blob;
   spender: principal;
 };
type AllowanceArgs = 
 record {
   account: Account;
   spender: Account;
 };
type Allowance = 
 record {
   allowance: nat;
   expires_at: opt nat64;
 };
type Account__1 = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
type Account = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
service : (principal, principal, text, text, text) -> Deposit
